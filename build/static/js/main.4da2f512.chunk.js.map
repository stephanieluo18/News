{"version":3,"sources":["Components/Alert.js","Components/Article.js","App.js","serviceWorker.js","index.js"],"names":["Alert","alert","className","Article","article","title","author","date","publishedAt","description","url","urlToImage","length","moment","format","href","target","rel","type","src","alt","App","useState","query","setQuery","articles","setArticles","setAlert","value","label","dropdown","setDropdown","ids","sort","setSort","getData","a","source","fetch","response","json","data","i","sources","push","id","x","toString","Axios","get","result","totalResults","onClick","onSubmit","e","preventDefault","placeholder","autoComplete","onChange","options","event","map","key","uuidv4","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4da2f512.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Alert = ({ alert }) => {\n  return (\n    <div className=\"alert\">\n      <h3>{alert}</h3>\n    </div>\n  );\n};\n\nexport default Alert;\n","import React from \"react\";\nimport moment from \"moment\";\n\nconst Article = ({ article }) => {\n  const title = article.title;\n  const author = article.author;\n  const date = article.publishedAt;\n  const description = article.description;\n  const url = article.url;\n  const urlToImage = article.urlToImage;\n\n  return (\n    <div className=\"article\">\n      <div className=\"text\">\n        <h4>{title}</h4>\n        <h5>{author != null && author.length > 25 ? \"\" : author}</h5>\n        <h6>Published {moment(date).format(\"MMMM Do YYYY\")}</h6>\n        <p>{description}</p>\n        <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n          <button type=\"button\">View Article</button>\n        </a>\n      </div>\n      <img src={urlToImage} alt=\"Article\" />\n    </div>\n  );\n};\n\nexport default Article;\n","import React, { useState } from \"react\";\nimport Axios from \"axios\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./normalize.css\";\nimport \"./skeleton.css\";\nimport \"./App.css\";\nimport Alert from \"./Components/Alert.js\";\nimport Select from \"react-select\";\nimport Article from \"./Components/Article.js\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [articles, setArticles] = useState(\"\");\n  const [alert, setAlert] = useState(\"\");\n  const [dropdown, setDropdown] = useState({\n    value: \"general\",\n    label: \"General\",\n  });\n  const ids = [];\n\n  const labels = [\n    {\n      value: \"general\",\n      label: \"General\",\n    },\n    {\n      value: \"business\",\n      label: \"Business\",\n    },\n    {\n      value: \"entertainment\",\n      label: \"Entertainment\",\n    },\n    {\n      value: \"sports\",\n      label: \"Sports\",\n    },\n  ];\n\n  const [sort, setSort] = useState({\n    value: \"publishedAt\",\n    label: \"Most Recent\",\n  });\n\n  const dates = [\n    {\n      value: \"publishedAt\",\n      label: \"Most Recent\",\n    },\n    {\n      value: \"relevancy\",\n      label: \"Most Relevant\",\n    },\n    {\n      value: \"popularity\",\n      label: \"Most Popular\",\n    },\n  ];\n\n  const getData = async () => {\n    /* source url determines the possible related ids based on category */\n    const source = `https://newsapi.org/v2/sources?category=${dropdown.value}&apiKey=26d35504515e414c888efe04f5ba33e6`;\n    const response = await fetch(source);\n    const data = await response.json();\n    //console.log(data);\n    //console.log(data.sources.length); //length of array\n    //console.log(data.sources[0].id); // should display id of the first array\n\n    /* fetch all possible ids and add it to sources of the url below */\n    for (let i = 0; i < data.sources.length; i++) {\n      ids.push(data.sources[i].id); // array of the ids\n    }\n\n    /* x is the string representation of the id array */\n    let x = \"\";\n\n    /* sources can take only a max of 20 items so if category is general, there is no need to filter*/\n    dropdown.value === \"general\" ? (x = \"\") : (x = ids.toString());\n\n    /* main source to search for articles */\n    const url = `https://newsapi.org/v2/everything?q=${query}&sources=${x}&sortBy=${sort.value}&pageSize=30&apiKey=26d35504515e414c888efe04f5ba33e6`;\n\n    /* if user does not enter anything, alert message will show*/\n    if (query === \"\") {\n      return setAlert(\"Please type in a keyword\");\n    }\n    const result = await Axios.get(url);\n    //console.log(sources);\n\n    /* if no results show, alert message is displayed */\n    if (result.data.totalResults === 0) {\n      return setAlert(\"No articles found with such name\");\n    }\n    setArticles(result.data.articles);\n    setAlert(\"\");\n    //setQuery(\"\");\n  };\n\n  /* query */\n  const onChange = (e) => {\n    setQuery(e.target.value);\n  };\n\n  /* when search button is clicked */\n  const onSubmit = (e) => {\n    e.preventDefault();\n    getData();\n  };\n\n  /* handles the changes for the different categories */\n  const handleChange = (event) => {\n    setDropdown(event);\n  };\n\n  /* handles the changes for the different sorting methods */\n  const handleSort = (event) => {\n    setSort(event);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        <h1 onClick={getData}>Worldwide News</h1>\n      </div>\n      <form className=\"search-bar\" onSubmit={onSubmit}>\n        <div className=\"alertStyle\">\n          {alert !== \"\" && <Alert alert={alert} />}\n        </div>\n        <div className=\"inline\">\n          <input\n            type=\"text\"\n            placeholder=\"Search News\"\n            autoComplete=\"off\"\n            onChange={onChange}\n            value={query}\n          />\n        </div>\n        <div className=\"inline\">\n          <Select value={dropdown} options={labels} onChange={handleChange} />\n        </div>\n        <div className=\"inline\">\n          <Select value={sort} options={dates} onChange={handleSort} />\n        </div>\n        <div className=\"inline\">\n          <input type=\"submit\" value=\"Search\" />\n        </div>\n      </form>\n      <div className=\"articles\">\n        {articles != [] &&\n          articles.map((article) => (\n            <Article key={uuidv4()} article={article} />\n          ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}